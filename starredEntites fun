import {
  catalogApiRef,
  useStarredEntities,
  entityRouteRef,
  entityRouteParams,
} from '@backstage/plugin-catalog-react';
import { useRouteRef, useApi } from '@backstage/core-plugin-api';
import { Link } from 'react-router-dom';
import styled from 'styled-components';
import { Chip, Avatar } from '@material-ui/core';
import { parseEntityRef, type Entity } from '@backstage/catalog-model';
import { useEffect, useState } from 'react';

const WidgetBox = styled.div`
  background: #fff;
  border-radius: 12px;
  margin-top: 20px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
`;

const Header = styled.div`
  background-color: #f5efff;
  padding: 12px 20px;
  font-weight: 600;
  font-size: 18px;
  color: #000000;
  border-top-left-radius: 12px;
  border-top-right-radius: 12px;
`;

const Content = styled.div`
  padding: 20px;
  display: flex;
  flex-direction: column;
  gap: 15px;
`;

const EntityItem = styled(Link)`
  display: flex;
  align-items: center;
  text-decoration: none;
  padding: 10px;
  border-radius: 8px;
  transition: background 0.2s ease;
  &:hover {
    background: #f9f9f9;
  }
`;

const EntityInfo = styled.div`
  margin-left: 10px;
  display: flex;
  flex-direction: column;
`;

const Message = styled.p`
  margin: 0;
  color: #999;
  font-size: 14px;
`;

const CustomStarredEntities = () => {
  const [loading, setLoading] = useState(true);
  const [entities, setEntities] = useState<Entity[]>([]);
  const { starredEntities } = useStarredEntities();
  const catalogApi = useApi(catalogApiRef);
  const entityRoute = useRouteRef(entityRouteRef);

  useEffect(() => {
    const fetchEntities = async () => {
      setLoading(true);
      const refs = Array.from(starredEntities);
      const fetched: Entity[] = [];

      for (const ref of refs) {
        try {
          const entity = await catalogApi.getEntityByRef(ref);
          if (entity?.metadata?.name) {
            fetched.push(entity);
          }
        } catch (error) {
          console.error(`Failed to fetch entity for ref ${ref}:`, error);
        }
      }

      setEntities(fetched);
      setLoading(false);
    };

    fetchEntities();
  }, [starredEntities, catalogApi]);

  return (
    <WidgetBox>
      <Header>Your Starred Entities</Header>
      <Content>
        {entities.length === 0 || loading ? (
          <Message>
            Click the star beside an entity name to add it to this list!
          </Message>
        ) : (
          entities.map((entity: Entity) => {
            let path = '#';
            try {
              const params = entityRouteParams(
                parseEntityRef(
                  `${entity.kind}:${entity.metadata.namespace || 'default'}/${
                    entity.metadata.name
                  }`,
                ),
              );
              path = entityRoute(params);
            } catch (e) {
              console.warn('Invalid entityRouteParams or routeRef:', e);
            }

            return (
              <EntityItem to={path} key={entity.metadata.uid}>
                <Avatar>{entity.metadata.name.charAt(0).toUpperCase()}</Avatar>
                <EntityInfo>
                  <strong>{entity.metadata.name}</strong>
                  <div>
                    <Chip
                      label={entity.kind || 'other'}
                      color="primary"
                      size="small"
                      style={{
                        marginRight: 8,
                        backgroundColor: '#a855f7',
                        color: '#fff',
                      }}
                    />
                    <Chip
                      label={`Type: ${entity.spec?.type || 'N/A'}`}
                      size="small"
                      style={{ backgroundColor: '#e0f7fa', color: '#00796b' }}
                    />
                  </div>
                </EntityInfo>
              </EntityItem>
            );
          })
        )}
      </Content>
    </WidgetBox>
  );
};

export default CustomStarredEntities;
