import React, { useEffect, useState } from 'react';
import {
  Box,
  Typography,
  Button,
  CircularProgress,
  Card,
  CardContent,
} from '@material-ui/core';
import { Link, useLocation } from 'react-router-dom';
import type { Visit } from '@backstage/plugin-home';

// Helper to build the localStorage key dynamically
function getVisitStorageKey(userEntityRef = 'user:development/guest'): string {
  return (
    '/' + encodeURIComponent(`@backstage/plugin-home:visits:${userEntityRef}`)
  );
}

function loadStoredVisits(userEntityRef = 'user:development/guest'): Visit[] {
  const key = getVisitStorageKey(userEntityRef);
  const json = localStorage.getItem(key);
  if (!json) return [];
  try {
    return JSON.parse(json) as Visit[];
  } catch (e) {
    console.error('Error parsing visits data:', e);
    return [];
  }
}

interface CustomVisitedProps {
  title: string;
  maxItems?: number;
  userEntityRef?: string;
  filterCondition?: (visit: Visit) => boolean;
}

const VisitedCard = ({
  title,
  maxItems = 5,
  userEntityRef = 'user:development/guest',
  filterCondition,
}: CustomVisitedProps) => {
  const [items, setItems] = useState<Visit[] | null>(null);
  const location = useLocation();

  useEffect(() => {
    let visits = loadStoredVisits(userEntityRef);
    if (filterCondition) {
      visits = visits.filter(filterCondition);
    }
    visits = visits.sort((a, b) => b.hits - a.hits).slice(0, maxItems);
    setItems(visits);
  }, [location.pathname, maxItems, userEntityRef, filterCondition]);

  if (items === null) {
    return <CircularProgress />;
  }

  return (
    <Card
      style={{
        borderRadius: 12,
        boxShadow: '0 2px 10px rgba(0, 0, 0, 0.08)',
        margin: '16px',
        padding: '16px',
        backgroundColor: '#f9fafb', // Light background color
        width: 350, // Fixed width like reference
      }}
    >
      <CardContent>
        <Typography
          variant="h6"
          style={{
            fontWeight: 600,
            marginBottom: 16,
            color: '#4A4A4A',
          }}
        >
          {title}
        </Typography>
        {items.length === 0 ? (
          <Typography color="textSecondary">No visits recorded yet.</Typography>
        ) : (
          items.map((visit, index) => (
            <Box
              key={visit.id}
              style={{
                marginBottom: 12,
                padding: '8px 0',
                borderBottom:
                  index < items.length - 1 ? '1px solid #eee' : 'none',
              }}
            >
              <Typography
                variant="subtitle1"
                style={{
                  fontWeight: 500,
                  color: '#333',
                  textDecoration: 'none',
                }}
                component={Link}
                to={visit.pathname}
              >
                {visit.name || visit.pathname}
              </Typography>
              <Typography
                variant="body2"
                color="textSecondary"
                style={{ marginTop: 4 }}
              >
                Visited {visit.hits} times
              </Typography>
            </Box>
          ))
        )}
        <Box display="flex" justifyContent="flex-end" mt={2}>
          <Button
            variant="outlined"
            size="small"
            style={{
              textTransform: 'none',
              borderColor: '#ccc',
              color: '#555',
            }}
          >
            View more
          </Button>
        </Box>
      </CardContent>
    </Card>
  );
};

export const HomePage = () => {
  return (
    <Box
      display="flex"
      justifyContent="center"
      alignItems="flex-start"
      mt={4}
      flexWrap="wrap"
    >
      <VisitedCard
        title="Top Visited"
        maxItems={5}
        filterCondition={() => true}
      />
      <VisitedCard
        title="Recent Visited"
        maxItems={5}
        filterCondition={visit => visit.hits >= 1}
      />
    </Box>
  );
};
