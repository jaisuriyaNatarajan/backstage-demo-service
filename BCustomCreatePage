import React, { useEffect, useMemo, useState } from 'react';
import { useApi } from '@backstage/core-plugin-api';
import { Content, Header, Page } from '@backstage/core-components';
import { Entity, stringifyEntityRef } from '@backstage/catalog-model';
import { useNavigate } from 'react-router-dom';
import Grid from '@mui/material/Grid';
import TemplateCard from './cards/TemplateCard';
import {
  catalogApiRef,
  useStarredEntities,
} from '@backstage/plugin-catalog-react';
import Button from '@mui/material/Button';
import CircularProgress from '@mui/material/CircularProgress';

function mapTemplateToCard(entity) {
  const { metadata, spec } = entity;
  const namespace = metadata.namespace ?? 'default';
  const name = metadata.name ?? 'template';
  return {
    tag: spec?.type ?? 'template',
    name: metadata.title ?? name,
    section: 'Title',
    descriptionTop: spec?.description ?? '',
    descriptionBottom: spec?.description ?? '',
    repoText:
      metadata.annotations?.['github.com/project-slug'] ||
      metadata.annotations?.['backstage.io/source-location'] ||
      'template',
    ref: `${namespace}/${name}`,
    entity,
  };
}

export default function CustomCreatePage() {
  const catalogApi = useApi(catalogApiRef);
  const navigate = useNavigate();
  const { isStarredEntity, toggleStarredEntity } = useStarredEntities();

  const [templates, setTemplates] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isExpanded, setIsExpanded] = useState(false);

  // Load templates
  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        setLoading(true);
        const { items } = await catalogApi.getEntities({
          filter: { kind: 'Template' },
        });
        if (mounted) setTemplates(items ?? []);
      } finally {
        if (mounted) setLoading(false);
      }
    })();
    return () => {
      mounted = false;
    };
  }, [catalogApi]);

  const cards = useMemo(() => templates.map(mapTemplateToCard), [templates]);

  const cardsToDisplay = useMemo(() => {
    if (isExpanded) {
      return cards;
    }
    return cards.slice(0, 4);
  }, [cards, isExpanded]);

  return (
    <Page themeId="tool">
      <Header
        title="Create a new component"
        subtitle="Create new software components using standard templates in your organization"
      />
      <Content>
        {loading && (
          <div style={{ textAlign: 'center', marginTop: '50px' }}>
            <CircularProgress />
          </div>
        )}
        {!loading && cards.length === 0 && (
          <Grid item xs={12}>
            <div
              style={{ opacity: 0.7, textAlign: 'center', marginTop: '20px' }}
            >
              No templates found.
            </div>
          </Grid>
        )}
        {!loading && cards.length > 0 && (
          <>
            <Grid container spacing={3}>
              {cardsToDisplay.map(c => {
                const entity = c.entity;
                const name = entity.metadata.name;
                const infoRoute = `/catalog/default/template/${name}`;
                const chooseRoute = `/create/templates/default/${name}`;
                const entityRef = stringifyEntityRef(entity);

                return (
                  <Grid item xs={12} md={6} key={`${name}`}>
                    <TemplateCard
                      tag={c.tag}
                      name={c.name}
                      section={c.section}
                      descriptionTop={c?.entity?.metadata?.description ?? ''}
                      descriptionBottom={c.descriptionBottom}
                      repoText={c?.entity?.spec?.owner}
                      onStar={() => toggleStarredEntity(entityRef)}
                      onInfo={() => navigate(infoRoute)}
                      onChoose={() => navigate(chooseRoute)}
                      isStarred={isStarredEntity(entityRef)}
                    />
                  </Grid>
                );
              })}
            </Grid>
            {cards.length > 4 && (
              <div style={{ textAlign: 'center', marginTop: '20px' }}>
                <Button
                  variant="contained"
                  onClick={() => setIsExpanded(!isExpanded)}
                >
                  {isExpanded ? 'View Less' : 'View More'}
                </Button>
              </div>
            )}
          </>
        )}
      </Content>
    </Page>
  );
}
